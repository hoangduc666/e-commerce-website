<?php

namespace App\Repositories\Eloquent;

use App\Models\Product;
use App\Repositories\Contracts\ProductRepositoryInterface;

<<<<<<< HEAD
=======

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

>>>>>>> dece221f309a6888873a1349df77751a0356c316
class ProductRepository extends AbstractRepository implements ProductRepositoryInterface
{

    public function __construct(Product $product)
    {
        parent::__construct($product); // TODO: Change the autogenerated stub
    }

    public function queryList(array $data)
    {
        $sort = !empty($data['sort']) ? $data['sort'] : 'asc';


<<<<<<< HEAD
        if ($sort !== 'asc' && $sort !== 'desc' && $sort !== 'latest') {
            $sort = 'asc';
        }

        return $this->model->query()->with(['parent', 'category','discounts']) // with để tránh truy vấn n+1
            ->when(!empty($data['name']), function ($query) use ($data) {
                $query->where('name', 'like', '%' . $data['name'] . '%');
            })
=======
        if($sort !== 'asc' && $sort !== 'desc' && $sort !== 'latest'){
            $sort = 'asc';
        }

        return $this->model->query()
>>>>>>> dece221f309a6888873a1349df77751a0356c316
            ->when(!empty($data['price']), function ($query) use ($data) {
                $priceRange = explode('-', $data['price']);

                if (count($priceRange) == 2) {
                    $query->whereBetween('price', [(int)$priceRange[0], (int)$priceRange[1]]);
                } elseif (count($priceRange) == 1) {
                    $query->where('price', '>=', (int)$priceRange[0]);
                }

            })
<<<<<<< HEAD
            ->when(!empty($data['slug']), function ($query)  use ($data){
                $query->where('slug',$data['slug']);
            })->when($sort === 'latest', function ($query) {
=======
            ->when($sort === 'latest', function ($query) {
>>>>>>> dece221f309a6888873a1349df77751a0356c316
                $query->orderByDesc('id');
            })
            ->when($sort !== 'latest', function ($query) use ($sort) {
                $query->orderBy('price', $sort);
            });
<<<<<<< HEAD

=======
>>>>>>> dece221f309a6888873a1349df77751a0356c316
    }

    public function changeStatus($id)
    {
        $is_active = 0;

        $product = $this->model->findOrFail($id);

        if ($product->is_active == $is_active) {
            $is_active = 1;
        }
        return $product->update(['is_active' => $is_active]);

    }

<<<<<<< HEAD
    public function copy($id){
        return $this->model->findOrFail($id);
    }


    public function getParentProductAttribute($parent)
    {
        return $this->model->where('parent_id',$parent)
            ->where('id', '<>', $this->model->id)
            ->get();
    }

    public function getChildProductAttribute($parent)
    {
        return $this->model->where('parent_id',$parent)
            ->get();
    }

    public function detailBySlug($slug){
        return $this->model->where('slug',$slug)->with(['attributes'])->firstOrFail();
    }





=======
>>>>>>> dece221f309a6888873a1349df77751a0356c316

}
